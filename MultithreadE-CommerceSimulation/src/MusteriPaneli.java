/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author kagan
 */

import java.awt.Color;
import java.awt.Component;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.TimerTask;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class MusteriPaneli extends javax.swing.JFrame {
    DatabaseProcesses processes = new DatabaseProcesses();
    DefaultTableModel model;
    


    public MusteriPaneli() {
        initComponents();
        model = (DefaultTableModel) musteriTable.getModel();
        
        loadOrdersToTable();
        musteriTable.setDefaultRenderer(Object.class, new MusteriPaneli.CustomRenderer());

        startCheckTimer();
    }
    
    
    
         class CustomRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // İlk sütundaki değeri al
            long ColumnValue = (long) table.getValueAt(row, 5);

            // Koşula göre tüm satırın yazı rengini değiştir
            if (ColumnValue  >= 15) { // Koşulu kendine göre ayarla
                c.setForeground(Color.red);
                table.setValueAt("Timeout", row, 10);
            }else{
                c.setForeground(Color.BLACK);  // Yazı rengini yeşil yap
                table.setValueAt("Pending", row, 10);


            }

            return c;
        }
    }
    

    
    private void loadOrdersToTable() {
    model.setRowCount(0); // Tabloyu temizle
    // Veritabanından bekleyen siparişleri al
    ArrayList<Order> orders = processes.getPendingOrders();
    
    if (orders == null || orders.isEmpty()) {
        //JOptionPane.showMessageDialog(this, "Bekleyen sipariş bulunamadı.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
        System.out.println("Orders listesi boş!");
        return;
    }

    // Siparişleri öncelik sırasına göre sıralayalım
    orders.sort((o1, o2) -> {
        // Premium müşterilere öncelik ver
        int customerType1 = processes.getCustomerType(o1.getMusteriid()).equals("Premium") ? 1 : 0;
        int customerType2 = processes.getCustomerType(o2.getMusteriid()).equals("Premium") ? 1 : 0;

        if (customerType1 == customerType2) {
            // Eğer müşteri türü aynıysa öncelik skoruna göre sırala
            return Integer.compare(o2.getPriorityScore(), o1.getPriorityScore());
        } else {
            // Premium müşterileri önce sırala
            return Integer.compare(customerType2, customerType1);
        }
    });

    // Siparişleri tabloya ekle
    for (Order order : orders) {
        if (order.getWaitingTime() > 30) {
            processes.updateOrderStatus(order.getId(), "Timeout");
            processes.addLog(order.getMusteriid(), order.getId(), "Error", "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.");
            //JOptionPane.showMessageDialog(this, "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.", "Hata", JOptionPane.ERROR_MESSAGE);
        }
        Object[] row = {
            order.getMusteriid(),    // Kullanıcı ID
            processes.getCustomerName(order.getMusteriid()),  // Kullanıcı Adı
            processes.getCustomerType(order.getMusteriid()),  // Tür
            processes.getCustomerBudget(order.getMusteriid()), // Bütçe
            order.getPriorityScore(), // Öncelik Skoru
            order.getWaitingTime(),   // Bekleme Süresi
            processes.getProductName(order.getproductid()), // Ürün Adı
            order.getAdet(),          // Adet
            processes.getProductPrice(order.getproductid()), // Ürün Fiyatı
            order.getTotalprice(),    // Toplam Fiyat
            processes.getOrderStatus(order.getMusteriid(), order.getproductid()) // Durum
            
        };
        
        System.out.println(order);
        model.addRow(row); // Tabloya ekliyoruz
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.s
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        musteriTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        onayla = new javax.swing.JButton();
        reddet = new javax.swing.JButton();
        tumunuonayla = new javax.swing.JButton();

        jPanel3.setPreferredSize(new java.awt.Dimension(266, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 266, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 440, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Müşteri Paneli");

        musteriTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer ID", "Müşteri Adı", "Müşteri Türü", "Bütçe", "Öncelik Skoru", "Bekleme Süresi", "Ürün Adı", "Sipariş Miktarı", "Ürün Fiyatı", "Toplam Maliyet", "Sipariş Durumu"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        musteriTable.getTableHeader().setReorderingAllowed(false);
        musteriTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                musteriTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(musteriTable);
        if (musteriTable.getColumnModel().getColumnCount() > 0) {
            musteriTable.getColumnModel().getColumn(0).setResizable(false);
            musteriTable.getColumnModel().getColumn(1).setResizable(false);
            musteriTable.getColumnModel().getColumn(2).setResizable(false);
            musteriTable.getColumnModel().getColumn(3).setResizable(false);
            musteriTable.getColumnModel().getColumn(4).setResizable(false);
            musteriTable.getColumnModel().getColumn(5).setResizable(false);
            musteriTable.getColumnModel().getColumn(6).setResizable(false);
            musteriTable.getColumnModel().getColumn(7).setResizable(false);
            musteriTable.getColumnModel().getColumn(8).setResizable(false);
            musteriTable.getColumnModel().getColumn(9).setResizable(false);
            musteriTable.getColumnModel().getColumn(10).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
        );

        jPanel4.setPreferredSize(new java.awt.Dimension(266, 0));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        onayla.setText("Onayla");
        onayla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onaylaActionPerformed(evt);
            }
        });

        reddet.setText("Reddet");
        reddet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reddetActionPerformed(evt);
            }
        });

        tumunuonayla.setText("Tümünü Onayla");
        tumunuonayla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tumunuonaylaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(onayla)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(reddet))
                    .addComponent(tumunuonayla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tumunuonayla, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onayla)
                    .addComponent(reddet)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onaylaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onaylaActionPerformed
        synchronized (this) { // Kritik bölge için senkronizasyon
        int selectedRow = musteriTable.getSelectedRow(); // Seçilen sipariş
        if (selectedRow == -1 ) {
            JOptionPane.showMessageDialog(this, "Lütfen bir sipariş seçin.", "Uyarı", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int customerId = (int) model.getValueAt(selectedRow, 0); // Müşteri ID
        String productname = model.getValueAt(selectedRow, 6).toString();
        int productId = processes.getProductId(productname); // Ürün ID
        int orderId = processes.getOrderId(customerId, productId); // Sipariş ID
        int quantity = (int) model.getValueAt(selectedRow, 7); // Adet
        double totalPrice = (double) model.getValueAt(selectedRow, 9); // Toplam Fiyat
        long waitingTime = (long) model.getValueAt(selectedRow, 5);
        // Bütçe ve stok kontrolü
        double budget = processes.getCustomerBudget(customerId);
            //System.out.println(budget);
        int stock = processes.getProductStock(productId);

        
         // Eğer bekleme süresi 15 saniyeyi geçerse, sipariş durumu Timeout olarak güncellenir
        if (waitingTime > 15) {
            processes.updateOrderStatus(orderId, "Timeout");
            processes.addLog(customerId, orderId, "Error", "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.");
            JOptionPane.showMessageDialog(this, "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.", "Hata", JOptionPane.ERROR_MESSAGE);
            loadOrdersToTable();
            return;
        }
        
        if (stock >= quantity && budget >= totalPrice) {
            // Sipariş başarılı
            processes.updateCustomerBudget(customerId, budget - totalPrice); // Bütçe güncelle
            processes.updateProductStock(productId, stock - quantity); // Stok güncelle
            processes.updateTotalSpent(customerId, totalPrice);
            processes.updateOrderStatus(orderId, "Success"); // Sipariş durumu güncelle
            processes.addLog(customerId, orderId, "Info", "Sipariş başarıyla tamamlandı.");
            JOptionPane.showMessageDialog(this, "Sipariş başarıyla onaylandı.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Sipariş başarısız
            processes.updateOrderStatus(orderId, "Failed");
            processes.addLog(customerId, orderId, "Error", 
                    "Sipariş başarısız. Sebep: " + (stock < quantity ? "Yetersiz stok." : "Yetersiz bütçe."));
            JOptionPane.showMessageDialog(this, "Sipariş başarısız. Sebep: " + 
                    (stock < quantity ? "Yetersiz stok." : "Yetersiz bütçe."), "Hata", JOptionPane.ERROR_MESSAGE);
        }

        // Tabloyu güncelle
        loadOrdersToTable();
    }
    }//GEN-LAST:event_onaylaActionPerformed

    private void reddetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reddetActionPerformed
        synchronized (this) { // Kritik bölge için senkronizasyon
        int selectedRow = musteriTable.getSelectedRow(); // Seçilen sipariş
        if (selectedRow == -1 ) {
            JOptionPane.showMessageDialog(this, "Lütfen bir sipariş seçin.", "Uyarı", JOptionPane.WARNING_MESSAGE);
            return;
        }

        int customerId = (int) model.getValueAt(selectedRow, 0); // Müşteri ID
        String productname = model.getValueAt(selectedRow, 6).toString();
        int productId = processes.getProductId(productname); // Ürün ID
        int orderId = processes.getOrderId(customerId, productId); // Sipariş ID
        processes.updateOrderStatus(orderId, "Failed");
            processes.addLog(customerId, orderId, "Error", "Sipariş admin tarafından reddedildi.");
            JOptionPane.showMessageDialog(this, "Sipariş admin tarafından reddedildi..", "Hata", JOptionPane.ERROR_MESSAGE);
            loadOrdersToTable();
        
        }
    }//GEN-LAST:event_reddetActionPerformed

    private void musteriTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_musteriTableMouseClicked
      

        
    }//GEN-LAST:event_musteriTableMouseClicked

    private void tumunuonaylaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tumunuonaylaActionPerformed
        synchronized (this) { // Kritik bölge için senkronizasyon
        int rowCount = model.getRowCount(); // Tablodaki toplam satır sayısı
        if (rowCount == 0) {
            JOptionPane.showMessageDialog(this, "Tabloda işlem yapılacak sipariş yok.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        for (int i = 0; i < rowCount; i++) {
            // Satırdaki verileri alın
            int customerId = (int) model.getValueAt(i, 0); // Müşteri ID
            String productName = model.getValueAt(i, 6).toString(); // Ürün Adı
            int productId = processes.getProductId(productName); // Ürün ID
            int orderId = processes.getOrderId(customerId, productId); // Sipariş ID
            int quantity = (int) model.getValueAt(i, 7); // Sipariş miktarı
            double totalPrice = (double) model.getValueAt(i, 9); // Toplam fiyat
            long waitingTime = (long) model.getValueAt(i, 5);

            // Stok ve bütçe kontrolü
            double budget = processes.getCustomerBudget(customerId);
            int stock = processes.getProductStock(productId);
            boolean isFailed = false;
            
            if (waitingTime > 15) {
            processes.updateOrderStatus(orderId, "Timeout");
            processes.addLog(customerId, orderId, "Error", "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.");
            JOptionPane.showMessageDialog(this, "Sipariş zaman aşımına uğradı. Sebep: Bekleme süresi aşıldı.", "Hata", JOptionPane.ERROR_MESSAGE);
            loadOrdersToTable();
            return;
        }
            if (stock < quantity || budget < totalPrice) {
                isFailed = true;
            }

            // Sipariş durumu güncelleme ve log ekleme
            if (isFailed) {
                String reason = (stock < quantity ? "Yetersiz stok." : "Yetersiz bütçe.");
                processes.updateOrderStatus(orderId, "Failed");
                processes.addLog(customerId, orderId, "Error", "Sipariş başarısız. Sebep: " + reason);
            } else {
                // Siparişi tamamla
                processes.updateCustomerBudget(customerId, budget - totalPrice); // Bütçe güncelle
                processes.updateProductStock(productId, stock - quantity); // Stok güncelle
                processes.updateTotalSpent(customerId, totalPrice); // Harcamayı güncelle
                processes.updateOrderStatus(orderId, "Success"); // Sipariş durumu güncelle
                processes.addLog(customerId, orderId, "Info", "Sipariş başarıyla tamamlandı.");
            }
        }

        // Tablodaki verileri güncelle
        loadOrdersToTable();
        JOptionPane.showMessageDialog(this, "Tüm siparişler işlendi.", "Bilgi", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_tumunuonaylaActionPerformed

        private void startCheckTimer() {
        java.util.Timer timer = new java.util.Timer();
        timer.schedule(new TimerTask() {
            @Override
            public void run() {
                loadOrdersToTable();
                
            }
        }, 0, 3000); 
    }    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MusteriPaneli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MusteriPaneli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MusteriPaneli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MusteriPaneli.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MusteriPaneli().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable musteriTable;
    private javax.swing.JButton onayla;
    private javax.swing.JButton reddet;
    private javax.swing.JButton tumunuonayla;
    // End of variables declaration//GEN-END:variables
}
